[{"/home/piotr/reservation/reservation-tool/src/index.js":"1","/home/piotr/reservation/reservation-tool/src/App.js":"2","/home/piotr/reservation/reservation-tool/src/Login.js":"3","/home/piotr/reservation/reservation-tool/src/admin/Category.js":"4","/home/piotr/reservation/reservation-tool/src/tool/ReservationTool.js":"5","/home/piotr/reservation/reservation-tool/src/register/RegisterForm.js":"6","/home/piotr/reservation/reservation-tool/src/admin/AdminMenu.js":"7","/home/piotr/reservation/reservation-tool/src/admin/Resource.js":"8","/home/piotr/reservation/reservation-tool/src/UserProfile.js":"9","/home/piotr/reservation/reservation-tool/src/tool/ErrorPage.js":"10","/home/piotr/reservation/reservation-tool/src/tool/SingleResource.js":"11","/home/piotr/reservation/reservation-tool/src/body/Body.js":"12","/home/piotr/reservation/reservation-tool/src/body/LockedList.js":"13","/home/piotr/reservation/reservation-tool/src/tool/ReservationForm.js":"14"},{"size":165,"mtime":1610894380282,"results":"15","hashOfConfig":"16"},{"size":819,"mtime":1610894380278,"results":"17","hashOfConfig":"16"},{"size":6329,"mtime":1610925680372,"results":"18","hashOfConfig":"16"},{"size":2778,"mtime":1610910309806,"results":"19","hashOfConfig":"16"},{"size":2978,"mtime":1610927430623,"results":"20","hashOfConfig":"16"},{"size":4292,"mtime":1610926789033,"results":"21","hashOfConfig":"16"},{"size":1084,"mtime":1610910575380,"results":"22","hashOfConfig":"16"},{"size":4907,"mtime":1610925932549,"results":"23","hashOfConfig":"16"},{"size":481,"mtime":1610894380282,"results":"24","hashOfConfig":"16"},{"size":777,"mtime":1610910657136,"results":"25","hashOfConfig":"16"},{"size":2086,"mtime":1610894380282,"results":"26","hashOfConfig":"16"},{"size":1736,"mtime":1610894380282,"results":"27","hashOfConfig":"16"},{"size":1730,"mtime":1610912649346,"results":"28","hashOfConfig":"16"},{"size":3625,"mtime":1610912575562,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"1vhf9p5",{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"32"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"32"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"32"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"32"},"/home/piotr/reservation/reservation-tool/src/index.js",[],["66","67"],"/home/piotr/reservation/reservation-tool/src/App.js",["68"],"import React from \"react\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport RegisterForm from \"./register/RegisterForm\";\nimport Login from \"./Login\";\nimport ReservationTool from \"./tool/ReservationTool\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport Category from \"./admin/Category\";\nimport Resource from \"./admin/Resource\";\nimport AdminMenu from \"./admin/AdminMenu\";\nexport default () => {\n  return (\n    <BrowserRouter>\n      <Route exact path=\"/\" component={Login} />\n      <Route path=\"/register\" component={RegisterForm} />\n      <Route path=\"/reservationTool\" component={ReservationTool} />\n      <Route path=\"/categoryAdmin\" component={Category} />\n      <Route path=\"/resourceAdmin\" component={Resource} />\n      <Route path=\"/adminmenu\" component={AdminMenu} />\n    </BrowserRouter>\n  );\n};\n","/home/piotr/reservation/reservation-tool/src/Login.js",["69","70"],"import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport UserProfile from \"./UserProfile\";\nimport \"./Login.css\";\nconst Login = () => {\n  const { register, handleSubmit, errors } = useForm();\n  const history = useHistory();\n  const [userNotExists, setUserNotExists] = useState(false);\n  const [passwordIncorrect, setpasswordIncorrect] = useState(false);\n  const [userNotConfirmed, setuserNotConfirmed] = useState(false);\n  const [serverError, setserverError] = useState(false);\n  useEffect(() => {\n    console.log(localStorage.getItem(\"email\"));\n    if (localStorage.getItem(\"isAdmin\")) {\n      history.push(\"/adminMenu\");\n    } else if (localStorage.getItem(\"email\")) {\n      history.push(\"/reservationTool\");\n    }\n  });\n\n  const handleClick = (prop) => {\n    prop.preventDefault();\n    history.push(\"/register\");\n  };\n  const checkIfAdministrator = async (email) => {\n    const response = await fetch(\n      \"http://localhost:8051/api/v1/user/administrator?mail=\" + email,\n      {\n        method: \"GET\",\n      }\n    ).catch((error) => {\n      console.log(\"siema\", error);\n      setserverError(true);\n    });\n    var data = 500;\n    if (response) {\n      console.log(\"response stat\", response);\n      data = response.status;\n    }\n    if (data === 200) {\n      console.log(\"success login\");\n      localStorage.setItem(\"isAdmin\", \"true\");\n      history.push(\"/adminMenu\");\n    } else if (data === 404) {\n      localStorage.setItem(\"email\", email);\n      history.push(\"/reservationTool\");\n    } else {\n      console.log(\"error\");\n      setserverError(true);\n    }\n  };\n  const checkIfApproved = async (email) => {\n    const response = await fetch(\n      \"http://localhost:8051/api/v1/user/confirmation/\" + email,\n      {\n        method: \"GET\",\n      }\n    ).catch((error) => {\n      console.log(\"siema\", error);\n      setserverError(true);\n    });\n    var data = 500;\n    if (response) {\n      console.log(\"response stat\", response);\n      data = response.status;\n    }\n    if (data === 200) {\n      checkIfAdministrator(email);\n    } else if (data === 403) {\n      console.log(\"user not confirmed\");\n      setuserNotConfirmed(true);\n    } else {\n      console.log(\"error\");\n      setserverError(true);\n    }\n  };\n\n  const verifyPassword = async (email, password) => {\n    const response = await fetch(\n      \"http://localhost:8051/api/v1/user/password?mail=\" +\n      email +\n      \"&password=\" +\n      password,\n      {\n        method: \"GET\",\n      }\n    ).catch((error) => {\n      console.log(\"siema\", error);\n      setserverError(true);\n    });\n    var data = 500;\n    if (response) {\n      console.log(\"response stat\", response);\n      data = response.status;\n    }\n    if (data === 200) {\n      checkIfApproved(email);\n      console.log(\"success login\");\n    } else if (data === 403) {\n      console.log(\"password incorrect\");\n      setpasswordIncorrect(true);\n    } else {\n      console.log(\"error\");\n      setserverError(true);\n    }\n  };\n\n  const submit = async (formData) => {\n    console.log(\"siema\", formData);\n    setserverError(false);\n    setUserNotExists(false);\n    setpasswordIncorrect(false);\n    setuserNotConfirmed(false);\n    const response = await fetch(\n      \"http://localhost:8051/api/v1/user/\" + formData.email,\n      {\n        method: \"GET\",\n      }\n    ).catch((error) => {\n      console.log(\"siema\", error);\n      setserverError(true);\n    });\n    var data = 500;\n    if (response) {\n      data = response.status;\n    }\n    console.log(\"response stat\", response);\n    if (data === 200) {\n      console.log(\"success, redirect to home page\");\n      verifyPassword(formData.email, formData.password);\n      //setServerErrors(data.errors);\n    } else if (data === 404) {\n      console.log(\"already exists\");\n      setUserNotExists(true);\n    } else {\n      console.log(\"error\");\n      setserverError(true);\n    }\n  };\n\n  return (\n    <div class=\"ui middle aligned center aligned grid \">\n      <div class=\"column\">\n        <h2 class=\"ui teal image header\">\n          <div class=\"content\">Log in to the application</div>\n        </h2>\n        <form class=\"ui large form\" onSubmit={handleSubmit(submit)}>\n          <div class=\"u\">\n            <div class=\"field\">\n              <div class=\"ui left icon input\">\n                <i class=\"user icon\"></i>\n                <input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  ref={register({\n                    required: \"You must provide an Email\",\n                  })}\n                />\n              </div>\n            </div>\n            {errors.email && (\n              <p class=\"error-register\">{errors.email.message}</p>\n            )}\n            {userNotExists && (\n              <p class=\"error-register\">\n                The user with the given email address does not exist\n              </p>\n            )}\n            <div class=\"field\">\n              <div class=\"ui left icon input\">\n                <i class=\"lock icon\"></i>\n                <input\n                  type=\"password\"\n                  name=\"password\"\n                  placeholder=\"Password\"\n                  ref={register({\n                    required: \"You must enter a password\",\n                  })}\n                />\n              </div>\n            </div>\n            {passwordIncorrect && (\n              <p class=\"error-register\">Incorrect password</p>\n            )}\n            {errors.password && (\n              <p class=\"error-register\">{errors.password.message}</p>\n            )}\n            <button type=\"submit\" class=\"ui fluid large teal submit button\">\n              Login\n            </button>\n          </div>\n\n          <div class=\"ui error message\"></div>\n        </form>\n        {userNotConfirmed && (\n          <p class=\"error-register\">\n            The user has not yet confirmed the account.\n          </p>\n        )}\n        {serverError && (\n          <p class=\"error-register\">Server connection error</p>\n        )}\n        <div class=\"ui message\">\n          You dont have an account yet?\n          <br></br>\n          <a href=\"#\" onClick={handleClick}>\n            Register\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","/home/piotr/reservation/reservation-tool/src/admin/Category.js",[],"/home/piotr/reservation/reservation-tool/src/tool/ReservationTool.js",[],"/home/piotr/reservation/reservation-tool/src/register/RegisterForm.js",[],"/home/piotr/reservation/reservation-tool/src/admin/AdminMenu.js",[],"/home/piotr/reservation/reservation-tool/src/admin/Resource.js",["71"],"import React, { Component } from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport \"./Category.css\";\nimport ErrorPage from \"../tool/ErrorPage\";\nimport Alert from \"@material-ui/lab/Alert\";\nconst options = [\n  { key: \"1\", text: \"1\", value: \"1\" },\n  { key: \"2\", text: \"2\", value: \"2\" },\n  { key: \"3\", text: \"3\", value: \"3\" },\n];\n\nclass Resource extends Component {\n  state = {\n    categories: [],\n    resourceName: \"\",\n    resourceDescription: \"\",\n    resourceImage: \"\",\n    localization: \"\",\n    howManyPeopleCanShare: \"\",\n    resourceCategory: \"\",\n    isAdmin: localStorage.getItem(\"isAdmin\"),\n    successSend: false,\n  };\n\n  handleChange = (e, { name, value }) => this.setState({ [name]: value });\n\n  handleSubmit = () => {\n    console.log(this.state);\n    this.addResourceRequest();\n  };\n\n  addResourceRequest = async () => {\n    const {\n      resourceName,\n      resourceDescription,\n      resourceImage,\n      localization,\n      howManyPeopleCanShare,\n      resourceCategory,\n    } = this.state;\n    const response = await fetch(\"http://localhost:8052/api/v1/resource\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        resourceName: resourceName,\n        resourceDescription: resourceDescription,\n        imageLink: resourceImage,\n        howManyPeopleCanShare: howManyPeopleCanShare,\n        categoryName: resourceCategory,\n        localization: localization,\n      }),\n    }).catch((error) => {\n      console.log(\"siema\", error);\n    });\n    if (response) {\n      console.log(\"test\");\n      var data = response.status;\n      if (data === 201) {\n        this.setState({\n          successSend: true,\n          resourceName: \"\",\n          resourceDescription: \"\",\n          imageLink: \"\",\n          howManyPeopleCanShare: \"\",\n          resourceCategory: \"\",\n          resourceImage: \"\",\n          localization: \"\",\n        });\n        setTimeout(() => this.setState({ successSend: false }), 3000);\n      }\n    }\n  };\n\n  getCategories = () => {\n    var map = [];\n    this.state.categories.map((item, i) => {\n      map.push({\n        key: item.categoryName,\n        text: item.categoryName,\n        value: item.categoryName,\n      });\n    });\n    return map;\n  };\n\n  componentDidMount() {\n    fetch(`http://localhost:8052/api/v1/resource/category`)\n      .then((res) => res.json())\n      .then((json) => this.setState({ categories: json }))\n      .then(() => console.log(this.state.categories))\n      .catch((error) => {\n        console.log(\"siema\", error);\n      });\n  }\n\n  render() {\n    const {\n      resourceName,\n      resourceDescription,\n      resourceImage,\n      localization,\n      howManyPeopleCanShare,\n      resourceCategory,\n    } = this.state;\n    return this.state.isAdmin ? (\n      <div>\n        <Form className=\"category-form\" onSubmit={this.handleSubmit}>\n          <Form.Input\n            fluid\n            label=\"Resource name\"\n            placeholder=\"Enter a resource name\"\n            name=\"resourceName\"\n            value={resourceName}\n            onChange={this.handleChange}\n            width={5}\n          />\n          <Form.TextArea\n            label=\"Description of the resource\"\n            placeholder=\"Enter a resource description\"\n            name=\"resourceDescription\"\n            value={resourceDescription}\n            onChange={this.handleChange}\n          />\n          <Form.Input\n            fluid\n            label=\"image of the resource\"\n            placeholder=\"Enter the image address for the resource\"\n            name=\"resourceImage\"\n            value={resourceImage}\n            onChange={this.handleChange}\n            width={6}\n          />\n          <Form.Input\n            fluid\n            label=\"Resource localization\"\n            placeholder=\"Enter localization\"\n            name=\"localization\"\n            value={localization}\n            onChange={this.handleChange}\n            width={6}\n          />\n\n          <Form.Select\n            fluid\n            label=\"Category\"\n            options={this.getCategories()}\n            placeholder=\"Choose category\"\n            name=\"resourceCategory\"\n            value={resourceCategory}\n            onChange={this.handleChange}\n            width={2}\n          />\n          <Form.Select\n            fluid\n            label=\"How many people can share the resource \"\n            name=\"howManyPeopleCanShare\"\n            value={howManyPeopleCanShare}\n            onChange={this.handleChange}\n            options={options}\n            placeholder=\"amount\"\n            width={2}\n          />\n          <Form.Button>Add a resource</Form.Button>\n        </Form>\n        {this.state.successSend && (\n          <Alert severity=\"success\">New resource successfully created</Alert>\n        )}\n      </div>\n    ) : (\n        <ErrorPage message=\"you do not have admin rights\"></ErrorPage>\n      );\n  }\n}\n\nexport default Resource;\n","/home/piotr/reservation/reservation-tool/src/UserProfile.js",[],"/home/piotr/reservation/reservation-tool/src/tool/ErrorPage.js",[],"/home/piotr/reservation/reservation-tool/src/tool/SingleResource.js",["72"],"import React from \"react\";\nimport {\n  AccordionWithHeader,\n  AccordionNode,\n  AccordionHeader,\n  AccordionPanel,\n} from \"react-accordion-with-header\";\nimport Body from \"./../body/Body\";\nimport \"./SingleResource.css\";\nclass SingleResource extends React.Component {\n  state = { category: this.props.category, resources: [], stan: [] };\n\n  componentDidMount() {\n    fetch(\n      `http://localhost:8052/api/v1/resource/category/resources?categoryName=` +\n        this.state.category\n    )\n      .then((res) => res.json())\n      .then((json) => this.setState({ resources: json }))\n      .then(() => console.log(this.state.resources))\n      .catch((error) => {\n        console.log(\"siema\", error);\n      });\n  }\n  check = (a) => {\n    const d = [];\n    a.map((i) => {\n      d.push(i.open);\n    });\n    this.setState({ stan: d });\n    console.log(\"ada\", this.state.stan);\n  };\n  getValue = (a, i) => {\n    if (a) {\n      return a[i];\n    } else {\n      return true;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>{this.state.category}</h1>\n        <AccordionWithHeader actionCallback={this.check}>\n          {this.state.resources.map((item, i) => {\n            return (\n              <AccordionNode key={i}>\n                <AccordionHeader\n                  horizontalAlignment=\"centerSpaceAround\"\n                  verticalAlignment=\"center\"\n                  className=\"main-acc\"\n                >\n                  <div>{item.resourceName}</div>\n                </AccordionHeader>\n                <AccordionPanel speed=\"500\">\n                  <Body\n                    description={item.resourceDescription}\n                    imageLink={item.imageLink}\n                    name={item.resourceName}\n                    limit={item.howManyPeopleCanShare}\n                    localization={item.localization}\n                    close={this.getValue(this.state.stan, i)}\n                  />\n                </AccordionPanel>\n              </AccordionNode>\n            );\n          })}\n        </AccordionWithHeader>\n      </div>\n    );\n  }\n}\nexport default SingleResource;\n","/home/piotr/reservation/reservation-tool/src/body/Body.js",["73","74","75"],"import React, { useEffect } from \"react\";\nimport ReservationForm from \"./../tool/ReservationForm\";\nimport LockedList from \"./LockedList\";\nimport { useState } from \"react\";\nimport { Image, Item } from \"semantic-ui-react\";\nimport \"./Body.css\";\nexport default function Body(props) {\n  const [limitForResource, setlimitForResource] = useState(props.limit);\n  const [currentUsage, setcurrentUsage] = useState(1);\n  const [name, setname] = useState(props.name);\n\n  const renderFunction = () => {\n    console.log(name, currentUsage, limitForResource);\n    fetch(\n      `http://localhost:8052/api/v1/reservation/resource/limit?resourceName=` +\n        name\n    )\n      .then((res) => res.text())\n      .then((value) => {\n        setcurrentUsage(value);\n      })\n      .catch((error) => {\n        console.log(\"siema\", error);\n      });\n  };\n\n  useEffect(() => {\n    renderFunction();\n  });\n  if (props.close) {\n    return (\n      <div className=\"full-items\">\n        <Item.Group>\n          <Item>\n            <Item.Image size=\"small\" src={props.imageLink} />\n\n            <Item.Content>\n              <Item.Header as=\"a\">{props.name}</Item.Header>\n              <Item.Meta>\n                <span className=\"locali\">{props.localization}</span>\n              </Item.Meta>\n              <Item.Description>{props.description}</Item.Description>\n            </Item.Content>\n          </Item>\n          {currentUsage >= limitForResource ? (\n            <LockedList resourceName={name}></LockedList>\n          ) : (\n            <ReservationForm\n              resourceName={props.name}\n              renderFunction={renderFunction}\n            ></ReservationForm>\n          )}\n        </Item.Group>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n","/home/piotr/reservation/reservation-tool/src/body/LockedList.js",["76","77","78","79"],"import React, { useState, useEffect, useLayoutEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport BlockIcon from \"@material-ui/icons/Block\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n  },\n}));\n\nexport default function LockedList(props) {\n  const classes = useStyles();\n  const [reservations, setReservations] = useState([]);\n  const notify = async () => {\n    const response = await fetch(\n      \"http://localhost:8052/api/v1/reservation/resource?resourceName=\" +\n      props.resourceName,\n      {\n        method: \"GET\",\n      }\n    )\n      .then((res) => res.json())\n      .then((json) => {\n        setReservations(json);\n        console.log(json);\n      })\n      .catch((error) => {\n        console.log(\"siema\", error);\n      });\n    console.log(\"his\");\n  };\n\n  useEffect(() => {\n    notify();\n  }, []);\n\n  return (\n    <div>\n      <h1>Reservations</h1>\n      <List className={classes.root}>\n        {reservations.map((item, i) => {\n          return (\n            <ListItem key={i}>\n              <ListItemAvatar>\n                <BlockIcon style={{ fill: \"red\", fontSize: 40 }} />\n              </ListItemAvatar>\n              <ListItemText\n                primary={item.assignTo}\n                secondary={item.reservationUntil}\n              />\n            </ListItem>\n          );\n        })}\n      </List>\n    </div>\n  );\n}\n","/home/piotr/reservation/reservation-tool/src/tool/ReservationForm.js",["80"],"import React from \"react\";\nimport DateTimePicker, { registerLocale } from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport Alert from \"@material-ui/lab/Alert\";\nclass ReservationForm extends React.Component {\n  state = {\n    selectedTime: new Date(),\n    incorrectDate: false,\n    remind: null,\n    resourceName: this.props.resourceName,\n    renderFunction: this.props.renderFunction,\n    successSend: false,\n  };\n  makeReservation = async (time) => {\n    const response = await fetch(\"http://localhost:8052/api/v1/reservation\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        reservationUntil: time,\n        resourceName: this.state.resourceName,\n        assignTo: localStorage.getItem(\"email\"),\n        remindMinutesBefore: this.state.remind,\n      }),\n    }).catch((error) => {\n      console.log(\"siema\", error);\n    });\n    if (response) {\n      console.log(\"test\");\n      var data = response.status;\n      if (data === 201) {\n        this.setState({\n          successSend: true,\n        });\n        setTimeout(() => this.setState({ successSend: false }), 3000);\n      }\n    }\n    this.state.renderFunction();\n  };\n\n  handleSend = (event) => {\n    event.preventDefault();\n    console.log(this.state.selectedTime, this.state.remind);\n    var time = this.state.selectedTime;\n    time = new Date(\n      time.getTime() - time.getTimezoneOffset() * 60000\n    ).toISOString();\n    time = time.replace(\"T\", \" \");\n    time = time.slice(0, -8);\n    console.log(\"month\", time);\n    this.makeReservation(time);\n  };\n\n  setTime = () => {\n    var date = new Date();\n    date.setHours(date.getHours() + 1);\n    return date;\n  };\n\n  validateTime = (e) => {\n    this.setState({ incorrectDate: false });\n    var current = new Date();\n    console.log(\"hi\", e, current);\n    if (e <= current) {\n      this.setState({ incorrectDate: true });\n    } else {\n      this.setState({ selectedTime: e });\n    }\n  };\n\n  render() {\n    console.log(\"loading\");\n    return (\n      <div>\n        <h1>Book resource</h1>\n        <form onSubmit={this.handleSend}>\n          <label htmlFor=\"fname\">Select the date you are booking for: </label>\n          <DateTimePicker\n            selected={this.state.selectedTime}\n            minDate={new Date()}\n            onChange={this.validateTime}\n            placeholderText=\"Check \"\n            showTimeSelect\n            timeCaption=\"Hour\"\n            timeFormat=\"p\"\n            timeIntervals={10}\n            dateFormat=\"MM/dd/yyyy h:mm\"\n          />\n          <label htmlFor=\"cars\"> Choose if you want to receive a reminder  </label>\n          <select\n            id=\"remind\"\n            name=\"remindSelect\"\n            onChange={(e) => {\n              this.setState({ remind: e.target.value });\n            }}\n          >\n            <option value=\"null\">Don't send</option>\n            <option value=\"5M\">5 minutes before end</option>\n            <option value=\"15M\">15 minutes before end</option>\n            <option value=\"1H\">1 hour before end</option>\n            <option value=\"24H\">24 hours before end</option>\n          </select>\n          {this.state.incorrectDate && (\n            <p class=\"error-register\">\n              You cannot select an hour earlier than the present time\n            </p>\n          )}\n          {this.state.successSend && (\n            <Alert severity=\"success\">The reservation was made correctly</Alert>\n          )}\n          <br></br>\n          <input type=\"submit\" value=\"Book it\" />\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default ReservationForm;\n",{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":10,"column":1,"nodeType":"87","endLine":21,"endColumn":3},{"ruleId":"88","severity":1,"message":"89","line":5,"column":8,"nodeType":"90","messageId":"91","endLine":5,"endColumn":19},{"ruleId":"92","severity":1,"message":"93","line":209,"column":11,"nodeType":"94","endLine":209,"endColumn":45},{"ruleId":"95","severity":1,"message":"96","line":78,"column":41,"nodeType":"97","messageId":"98","endLine":78,"endColumn":43},{"ruleId":"95","severity":1,"message":"96","line":27,"column":15,"nodeType":"97","messageId":"98","endLine":27,"endColumn":17},{"ruleId":"88","severity":1,"message":"99","line":5,"column":10,"nodeType":"90","messageId":"91","endLine":5,"endColumn":15},{"ruleId":"88","severity":1,"message":"100","line":8,"column":28,"nodeType":"90","messageId":"91","endLine":8,"endColumn":47},{"ruleId":"88","severity":1,"message":"101","line":10,"column":16,"nodeType":"90","messageId":"91","endLine":10,"endColumn":23},{"ruleId":"88","severity":1,"message":"102","line":1,"column":38,"nodeType":"90","messageId":"91","endLine":1,"endColumn":53},{"ruleId":"88","severity":1,"message":"103","line":7,"column":8,"nodeType":"90","messageId":"91","endLine":7,"endColumn":14},{"ruleId":"88","severity":1,"message":"104","line":21,"column":11,"nodeType":"90","messageId":"91","endLine":21,"endColumn":19},{"ruleId":"105","severity":1,"message":"106","line":41,"column":6,"nodeType":"107","endLine":41,"endColumn":8,"suggestions":"108"},{"ruleId":"88","severity":1,"message":"109","line":2,"column":26,"nodeType":"90","messageId":"91","endLine":2,"endColumn":40},"no-native-reassign",["110"],"no-negated-in-lhs",["111"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","no-unused-vars","'UserProfile' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Image' is defined but never used.","'setlimitForResource' is assigned a value but never used.","'setname' is assigned a value but never used.","'useLayoutEffect' is defined but never used.","'Avatar' is defined but never used.","'response' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'notify'. Either include it or remove the dependency array.","ArrayExpression",["112"],"'registerLocale' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"113","fix":"114"},"Update the dependencies array to be: [notify]",{"range":"115","text":"116"},[1199,1201],"[notify]"]